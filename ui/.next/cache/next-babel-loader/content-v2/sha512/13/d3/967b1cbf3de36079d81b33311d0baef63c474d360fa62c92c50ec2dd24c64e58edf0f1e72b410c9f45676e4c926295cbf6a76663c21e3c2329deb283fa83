{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/Users/ranwahle/tests/10n1/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/ranwahle/tests/10n1/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/ranwahle/tests/10n1/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport { useEffect, useState } from 'react';\nimport { Button, Card, CardBody, Col, Container, Form, FormFeedback, FormGroup, Input, Label, Row } from 'reactstrap';\nimport { useFormik } from 'formik';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport AvailabilitySelector from '../../components/AvailabilitySelector';\nimport Header from '../../components/Header';\nimport { CREATE_EXPERT, UPDATE_EXPERT } from '../../graphql/mutations';\nimport useAuth from '../../hooks/useAuth';\nimport { GET_EXPERT_BY_EMAIL } from '../../graphql/queries';\nvar RegistrationSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'To short!').max(50, 'To long!').required('Required!'),\n  phone: Yup.string().min(7, 'To short!').max(15, 'To long!').required('Required!'),\n  email: Yup.string().email('Invalid email').required('Required!'),\n  bio: Yup.string(),\n  expertise: Yup.array().min(1, 'Minimum 1 expertise').required('Required!'),\n  availability: Yup.array().of(Yup.object({\n    day: Yup.string(),\n    startTime: Yup.string(),\n    endTime: Yup.string(),\n    key: Yup.string()\n  })).min(1, 'Minimum 1 Availability').required('Required!')\n});\n\nvar Add = function Add() {\n  var _formik$values, _formik$errors, _formik$errors2, _formik$values2, _formik$errors3, _formik$errors4, _formik$values3, _formik$errors5, _formik$errors6, _formik$values4, _formik$values$expert, _formik$values5, _formik$errors7, _formik$errors8, _formik$errors9, _formik$errors10, _formik$values6, _formik$errors11, _formik$errors12;\n\n  var _useState = useState([]),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useMutation = useMutation(CREATE_EXPERT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createExpert = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_EXPERT),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateExpert = _useMutation4[0];\n\n  var _useAuth = useAuth(),\n      userData = _useAuth.userData;\n\n  var router = useRouter();\n  var email = router.query.email;\n\n  var _useLazyQuery = useLazyQuery(GET_EXPERT_BY_EMAIL, {\n    variables: {\n      email: email\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getExpertData = _useLazyQuery2[0],\n      data = _useLazyQuery2[1].data;\n\n  var expertData = (data === null || data === void 0 ? void 0 : data.expert) || {};\n  var formik = useFormik({\n    initialValues: {\n      name: (userData === null || userData === void 0 ? void 0 : userData.name) || (expertData === null || expertData === void 0 ? void 0 : expertData.name) || '',\n      phone: (userData === null || userData === void 0 ? void 0 : userData.phone) || (expertData === null || expertData === void 0 ? void 0 : expertData.phone) || '',\n      email: (userData === null || userData === void 0 ? void 0 : userData.email) || (expertData === null || expertData === void 0 ? void 0 : expertData.email) || '',\n      bio: (expertData === null || expertData === void 0 ? void 0 : expertData.bio) || '',\n      image: (userData === null || userData === void 0 ? void 0 : userData.image) || (expertData === null || expertData === void 0 ? void 0 : expertData.image) || '',\n      expertise: (expertData === null || expertData === void 0 ? void 0 : expertData.expertise) || [],\n      availability: (expertData === null || expertData === void 0 ? void 0 : expertData.availability) || []\n    },\n    enableReinitialize: true,\n    validationSchema: RegistrationSchema,\n    onSubmit: function onSubmit(values) {\n      if (email) {\n        updateExpert({\n          variables: {\n            input: _objectSpread(_objectSpread({}, values), {}, {\n              expertise: _toConsumableArray(values.expertise.map(function (theme) {\n                return typeof theme === 'object' ? _.pick(theme, ['name']) : {\n                  name: theme\n                };\n              }))\n            })\n          }\n        }).then(function () {\n          router.push(\"/experts/\".concat(email));\n        });\n      } else {\n        createExpert({\n          variables: {\n            input: _objectSpread(_objectSpread({}, values), {}, {\n              expertise: _toConsumableArray(values.expertise.map(function (theme) {\n                return typeof theme === 'object' ? _.pick(theme, ['name']) : {\n                  name: theme\n                };\n              }))\n            })\n          }\n        }).then(function () {\n          router.push('/');\n        });\n      }\n    }\n  });\n  useEffect(function () {\n    if (email) {\n      getExpertData();\n    }\n  }, [email]);\n  useEffect(function () {\n    fetch('/api/radar').then(function (res) {\n      return res.json();\n    }).then(function (resData) {\n      var techs = [];\n      resData.forEach(function (tech, idx) {\n        if (idx) {\n          techs.push(tech[0] || '');\n        }\n      });\n      setOptions(_.uniq(techs));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      title: \"1 On 1 - Registration page\"\n    }), /*#__PURE__*/_jsx(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxs(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsx(Col, {\n          md: 3\n        }), /*#__PURE__*/_jsx(Col, {\n          md: 6,\n          children: /*#__PURE__*/_jsx(Card, {\n            className: \"p-3\",\n            children: /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsxs(Form, {\n                children: [/*#__PURE__*/_jsxs(Row, {\n                  children: [/*#__PURE__*/_jsx(Col, {\n                    md: 6,\n                    sm: 12,\n                    children: /*#__PURE__*/_jsxs(FormGroup, {\n                      className: \"d-flex flex-column\",\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"name\",\n                        children: \"Name:\"\n                      }), /*#__PURE__*/_jsx(Input, _objectSpread({\n                        type: \"text\",\n                        name: \"name\",\n                        id: \"name\",\n                        value: formik === null || formik === void 0 ? void 0 : (_formik$values = formik.values) === null || _formik$values === void 0 ? void 0 : _formik$values.name,\n                        onChange: formik.handleChange,\n                        placeholder: \"Enter your name...\"\n                      }, formik.getFieldProps('name'))), ((_formik$errors = formik.errors) === null || _formik$errors === void 0 ? void 0 : _formik$errors.name) && formik.touched.name && /*#__PURE__*/_jsx(FormFeedback, {\n                        children: (_formik$errors2 = formik.errors) === null || _formik$errors2 === void 0 ? void 0 : _formik$errors2.name\n                      })]\n                    })\n                  }), /*#__PURE__*/_jsx(Col, {\n                    md: 6,\n                    sm: 12,\n                    children: /*#__PURE__*/_jsxs(FormGroup, {\n                      className: \"d-flex flex-column\",\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"phone\",\n                        children: \"Phone #:\"\n                      }), /*#__PURE__*/_jsx(Input, _objectSpread({\n                        type: \"tel\",\n                        name: \"phone\",\n                        id: \"phone\",\n                        value: formik === null || formik === void 0 ? void 0 : (_formik$values2 = formik.values) === null || _formik$values2 === void 0 ? void 0 : _formik$values2.phone,\n                        onChange: formik.handleChange,\n                        placeholder: \"Enter your phone #...\"\n                      }, formik.getFieldProps('phone'))), ((_formik$errors3 = formik.errors) === null || _formik$errors3 === void 0 ? void 0 : _formik$errors3.phone) && formik.touched.phone && /*#__PURE__*/_jsx(FormFeedback, {\n                        children: (_formik$errors4 = formik.errors) === null || _formik$errors4 === void 0 ? void 0 : _formik$errors4.phone\n                      })]\n                    })\n                  })]\n                }), /*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsx(Col, {\n                    md: 12,\n                    children: /*#__PURE__*/_jsxs(FormGroup, {\n                      className: \"d-flex flex-column\",\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"email\",\n                        children: \"Email:\"\n                      }), /*#__PURE__*/_jsx(Input, _objectSpread({\n                        type: \"email\",\n                        name: \"email\",\n                        id: \"email\",\n                        value: formik === null || formik === void 0 ? void 0 : (_formik$values3 = formik.values) === null || _formik$values3 === void 0 ? void 0 : _formik$values3.email,\n                        onChange: formik.handleChange,\n                        placeholder: \"Enter your email...\"\n                      }, formik.getFieldProps('email'))), ((_formik$errors5 = formik.errors) === null || _formik$errors5 === void 0 ? void 0 : _formik$errors5.email) && formik.touched.email && /*#__PURE__*/_jsx(FormFeedback, {\n                        children: (_formik$errors6 = formik.errors) === null || _formik$errors6 === void 0 ? void 0 : _formik$errors6.email\n                      })]\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsx(Col, {\n                    md: 12,\n                    children: /*#__PURE__*/_jsxs(FormGroup, {\n                      className: \"d-flex flex-column\",\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"bio\",\n                        children: \"Bio:\"\n                      }), /*#__PURE__*/_jsx(Input, _objectSpread({\n                        type: \"textarea\",\n                        name: \"bio\",\n                        id: \"bio\",\n                        value: formik === null || formik === void 0 ? void 0 : (_formik$values4 = formik.values) === null || _formik$values4 === void 0 ? void 0 : _formik$values4.bio,\n                        onChange: formik.handleChange\n                      }, formik.getFieldProps('bio')))]\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsx(Col, {\n                    md: 12,\n                    children: /*#__PURE__*/_jsxs(FormGroup, {\n                      className: \"d-flex flex-column\",\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"expertise\",\n                        children: \"Expertise:\"\n                      }), /*#__PURE__*/_jsx(Typeahead, {\n                        id: \"expertise\",\n                        name: \"expertise\",\n                        labelKey: \"name\",\n                        size: \"large\",\n                        multiple: true,\n                        allowNew: true,\n                        onChange: function onChange(value) {\n                          formik.setFieldValue('expertise', value);\n                        },\n                        options: options,\n                        placeholder: \"Choose several expertise...\",\n                        selected: (_formik$values$expert = formik === null || formik === void 0 ? void 0 : (_formik$values5 = formik.values) === null || _formik$values5 === void 0 ? void 0 : _formik$values5.expertise) !== null && _formik$values$expert !== void 0 ? _formik$values$expert : [].map(function (expertise) {\n                          return expertise.name;\n                        }),\n                        className: (_formik$errors7 = formik.errors) !== null && _formik$errors7 !== void 0 && _formik$errors7.expertise && formik.touched.expertise ? 'border-danger border rounded' : ''\n                      }), ((_formik$errors8 = formik.errors) === null || _formik$errors8 === void 0 ? void 0 : _formik$errors8.expertise) && /*#__PURE__*/_jsx(\"div\", {\n                        className: \"text-danger\",\n                        children: (_formik$errors9 = formik.errors) === null || _formik$errors9 === void 0 ? void 0 : _formik$errors9.expertise\n                      })]\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsxs(Col, {\n                    md: 12,\n                    children: [/*#__PURE__*/_jsxs(FormGroup, {\n                      className: (_formik$errors10 = formik.errors) !== null && _formik$errors10 !== void 0 && _formik$errors10.availability && formik.touched.availability ? 'border-danger border rounded d-flex flex-column' : 'd-flex flex-column',\n                      children: [/*#__PURE__*/_jsx(Label, {\n                        \"for\": \"availability\",\n                        children: \"Availability:\"\n                      }), /*#__PURE__*/_jsx(AvailabilitySelector, {\n                        values: (_formik$values6 = formik.values) === null || _formik$values6 === void 0 ? void 0 : _formik$values6.availability,\n                        onChange: function onChange(value) {\n                          formik.setFieldValue('availability', value);\n                        }\n                      })]\n                    }), ((_formik$errors11 = formik.errors) === null || _formik$errors11 === void 0 ? void 0 : _formik$errors11.availability) && /*#__PURE__*/_jsx(\"div\", {\n                      className: \"text-danger\",\n                      children: (_formik$errors12 = formik.errors) === null || _formik$errors12 === void 0 ? void 0 : _formik$errors12.availability\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsx(Col, {\n                    md: 12,\n                    className: \"d-flex justify-content-end \",\n                    children: /*#__PURE__*/_jsx(Button, {\n                      color: \"warning\",\n                      onClick: formik.submitForm,\n                      disabled: !formik.isValid,\n                      children: \"Edit\"\n                    })\n                  })\n                })]\n              })\n            })\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default Add;","map":null,"metadata":{},"sourceType":"module"}