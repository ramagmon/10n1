{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-array-index-key */\nimport { useCallback, useEffect, useState } from 'react';\nimport { Badge, Col, Input, Row } from 'reactstrap';\nconst daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst arr = Array(47).fill(null).map((_, item) => item % 2 === 0 ? `${item / 2 + 1}:00` : `${Math.floor(item / 2 + 1)}:30`);\n\nconst AvailabilityRow = ({\n  day,\n  days,\n  setDays,\n  i,\n  change,\n  defaultChecked\n}) => {\n  const {\n    0: startTime,\n    1: setStartTime\n  } = useState('9:00');\n  const {\n    0: endTime,\n    1: setEndTime\n  } = useState('10:00');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(defaultChecked);\n  useEffect(() => {\n    change(`day-${day}-${i}`, checked ? 'add' : 'remove', day, startTime, endTime);\n  }, [checked, startTime, endTime]);\n  useEffect(() => {\n    setEndTime(arr[arr.indexOf(startTime) + 2]);\n  }, [startTime, endTime]);\n  return /*#__PURE__*/_jsxs(Row, {\n    noGutters: true,\n    className: \"d-flex align-items-center mb-2\",\n    children: [/*#__PURE__*/_jsx(Col, {\n      md: 1,\n      className: \"d-flex align-items-center\",\n      children: /*#__PURE__*/_jsx(Input, {\n        type: \"checkbox\",\n        className: \"ml-2\",\n        checked: checked,\n        onChange: () => setChecked(!checked)\n      })\n    }), /*#__PURE__*/_jsx(Col, {\n      md: 2,\n      children: day\n    }), /*#__PURE__*/_jsxs(Col, {\n      md: 3,\n      className: \"d-flex align-items-center pl-3\",\n      children: [\"from:\", /*#__PURE__*/_jsx(Input, {\n        type: \"select\",\n        defaultValue: startTime,\n        className: \"mx-1\",\n        onChange: e => {\n          setStartTime(e.target.value);\n        },\n        children: arr.map(item => /*#__PURE__*/_jsx(\"option\", {\n          children: item\n        }, `hours${item}`))\n      })]\n    }), /*#__PURE__*/_jsxs(Col, {\n      md: 3,\n      className: \"d-flex align-items-center pl-4\",\n      children: [\"to:\", /*#__PURE__*/_jsx(Input, {\n        type: \"select\",\n        value: endTime,\n        className: \"mx-1\",\n        onChange: e => {\n          setEndTime(e.target.value);\n        },\n        children: arr.map((item, ind) => /*#__PURE__*/_jsx(\"option\", {\n          disabled: ind <= arr.indexOf(startTime),\n          children: item\n        }, `hours${item}`))\n      })]\n    }), /*#__PURE__*/_jsx(Col, {\n      md: 3,\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        href: \"#/\",\n        onClick: e => {\n          e.preventDefault();\n          const newDays = [...days];\n          newDays.splice(i, 0, day);\n          setDays(newDays);\n        },\n        children: \"Add another slot >\"\n      })\n    })]\n  });\n};\n\nconst CheckedRow = ({\n  day,\n  change\n}) => {\n  return /*#__PURE__*/_jsxs(Badge, {\n    color: \"info\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: () => change(day.key, 'remove', day.day, day.startTime, day.endTime),\n    className: \"mr-3\",\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      className: \"mx-2\",\n      children: \"X\"\n    }), \"\\uD83D\\uDCC5 \", day.day, \" - \", day.startTime, \" - \", day.endTime]\n  });\n};\n\nconst AvailabilitySelector = ({\n  onChange,\n  values\n}) => {\n  const {\n    0: days,\n    1: setDays\n  } = useState(daysOfWeek);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState({});\n  const change = useCallback((key, method, day, startTime, endTime) => {\n    const newVal = {\n      day,\n      startTime,\n      endTime,\n      key\n    };\n\n    const selectedCopy = _objectSpread({}, selected);\n\n    if (method === 'add') {\n      selectedCopy[key] = newVal;\n    } else {\n      delete selectedCopy[key];\n    }\n\n    setSelected(selectedCopy);\n    onChange(Object.values(selectedCopy));\n  }, [selected]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [days.map((day, i) => /*#__PURE__*/_jsx(AvailabilityRow, {\n      day: day,\n      days: days,\n      setDays: setDays,\n      i: i,\n      change: change\n    }, `day-${day}-${i}`)), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        className: \"font-weight-bold\",\n        children: \"Selected slots:\"\n      }), values.map((val, i) => /*#__PURE__*/_jsx(CheckedRow, {\n        day: val,\n        change: change\n      }, `Checkeday-${val.day}-${i}`))]\n    })]\n  });\n};\n\nexport default AvailabilitySelector;","map":null,"metadata":{},"sourceType":"module"}