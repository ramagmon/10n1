{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useCallback, useContext, useRef, useState } from 'react';\nimport { useGoogleLogin, useGoogleLogout } from 'react-google-login';\nimport { Container, Spinner } from 'reactstrap';\nimport http from 'axios';\nimport { useRouter } from 'next/router';\nimport { useMutation } from '@apollo/client';\nimport client from '../apollo-client';\nimport { GET_EXPERT_BY_EMAIL } from '../graphql/queries';\nimport { CREATE_EXPERT } from '../graphql/mutations';\nexport const AuthContext = /*#__PURE__*/createContext({});\nconst googleClientId = '158154804757-5oja12b2flilb717ndvrdct3or8uqjqi.apps.googleusercontent.com';\nexport const AuthProvider = ({\n  children\n}) => {\n  var _userDataRef$current16;\n\n  const [createExpert] = useMutation(CREATE_EXPERT);\n  const {\n    0: isLoggedIn,\n    1: setIsLoggedIn\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const userDataRef = useRef({});\n  const router = useRouter();\n\n  const onSuccess = async response => {\n    var _response$tokenObj, _userDataRef$current, _userDataRef$current2, _userDataRef$current8, _userDataRef$current9, _userDataRef$current10, _userDataRef$current11, _userDataRef$current12, _userDataRef$current13, _userDataRef$current14;\n\n    setIsLoading(true);\n    setIsLoggedIn(true);\n    userDataRef.current = _objectSpread(_objectSpread({}, userDataRef.current), {}, {\n      name: response.profileObj.name,\n      email: response.profileObj.email,\n      image: response.profileObj.imageUrl\n    });\n\n    if (response !== null && response !== void 0 && (_response$tokenObj = response.tokenObj) !== null && _response$tokenObj !== void 0 && _response$tokenObj.access_token && !(userDataRef !== null && userDataRef !== void 0 && (_userDataRef$current = userDataRef.current) !== null && _userDataRef$current !== void 0 && _userDataRef$current.phone)) {\n      var _response$tokenObj2, _data$phoneNumbers, _data$phoneNumbers$;\n\n      const {\n        data\n      } = await http.get('https://people.googleapis.com/v1/people/me?personFields=phoneNumbers', {\n        headers: {\n          Authorization: `Bearer ${response === null || response === void 0 ? void 0 : (_response$tokenObj2 = response.tokenObj) === null || _response$tokenObj2 === void 0 ? void 0 : _response$tokenObj2.access_token}`\n        }\n      });\n\n      if (data !== null && data !== void 0 && (_data$phoneNumbers = data.phoneNumbers) !== null && _data$phoneNumbers !== void 0 && (_data$phoneNumbers$ = _data$phoneNumbers[0]) !== null && _data$phoneNumbers$ !== void 0 && _data$phoneNumbers$.value) {\n        var _data$phoneNumbers$2;\n\n        userDataRef.current = _objectSpread(_objectSpread({}, userDataRef.current), {}, {\n          phone: (data === null || data === void 0 ? void 0 : (_data$phoneNumbers$2 = data.phoneNumbers[0]) === null || _data$phoneNumbers$2 === void 0 ? void 0 : _data$phoneNumbers$2.value) || null\n        });\n      }\n    }\n\n    if ((_userDataRef$current2 = userDataRef.current) !== null && _userDataRef$current2 !== void 0 && _userDataRef$current2.email) {\n      var _userDataRef$current3;\n\n      const {\n        data\n      } = await client.query({\n        query: GET_EXPERT_BY_EMAIL,\n        variables: {\n          email: (_userDataRef$current3 = userDataRef.current) === null || _userDataRef$current3 === void 0 ? void 0 : _userDataRef$current3.email\n        }\n      });\n\n      if (data !== null && data !== void 0 && data.expert) {\n        userDataRef.current = _objectSpread(_objectSpread({}, userDataRef.current), data.expert);\n      } else {\n        var _userDataRef$current4, _userDataRef$current5, _userDataRef$current6, _userDataRef$current7;\n\n        await createExpert({\n          variables: {\n            input: {\n              name: ((_userDataRef$current4 = userDataRef.current) === null || _userDataRef$current4 === void 0 ? void 0 : _userDataRef$current4.name) || '',\n              phone: ((_userDataRef$current5 = userDataRef.current) === null || _userDataRef$current5 === void 0 ? void 0 : _userDataRef$current5.phone) || '',\n              email: ((_userDataRef$current6 = userDataRef.current) === null || _userDataRef$current6 === void 0 ? void 0 : _userDataRef$current6.email) || '',\n              image: ((_userDataRef$current7 = userDataRef.current) === null || _userDataRef$current7 === void 0 ? void 0 : _userDataRef$current7.image) || ''\n            }\n          }\n        });\n      }\n    }\n\n    if (!((_userDataRef$current8 = userDataRef.current) !== null && _userDataRef$current8 !== void 0 && (_userDataRef$current9 = _userDataRef$current8.slackData) !== null && _userDataRef$current9 !== void 0 && _userDataRef$current9.accessToken)) {\n      router.push('/registration/step2');\n    } else if (!(userDataRef !== null && userDataRef !== void 0 && (_userDataRef$current10 = userDataRef.current) !== null && _userDataRef$current10 !== void 0 && (_userDataRef$current11 = _userDataRef$current10.expertise) !== null && _userDataRef$current11 !== void 0 && _userDataRef$current11.length)) {\n      router.push('/registration/step3');\n    } else if (!(userDataRef !== null && userDataRef !== void 0 && (_userDataRef$current12 = userDataRef.current) !== null && _userDataRef$current12 !== void 0 && (_userDataRef$current13 = _userDataRef$current12.availability) !== null && _userDataRef$current13 !== void 0 && _userDataRef$current13.length)) {\n      router.push('/registration/step4');\n    } else if (!(userDataRef !== null && userDataRef !== void 0 && (_userDataRef$current14 = userDataRef.current) !== null && _userDataRef$current14 !== void 0 && _userDataRef$current14.bio)) {\n      router.push('/registration/step5');\n    }\n\n    setIsLoading(false);\n  };\n\n  const onLogout = async () => {\n    setIsLoading(false);\n    userDataRef.current = {};\n    await router.push('/');\n    await router.reload();\n  };\n\n  const onFailure = async () => {\n    setIsLoading(false);\n  };\n\n  const onAutoLoadFinished = async connected => {\n    console.warn({\n      connected\n    });\n\n    if (!connected) {\n      setIsLoading(false);\n    }\n  };\n\n  const refetch = useCallback(async () => {\n    var _userDataRef$current15;\n\n    const {\n      data\n    } = await client.query({\n      query: GET_EXPERT_BY_EMAIL,\n      variables: {\n        email: (_userDataRef$current15 = userDataRef.current) === null || _userDataRef$current15 === void 0 ? void 0 : _userDataRef$current15.email\n      }\n    });\n\n    if (data !== null && data !== void 0 && data.expert) {\n      userDataRef.current = _objectSpread(_objectSpread({}, userDataRef.current), data.expert);\n    }\n\n    return data === null || data === void 0 ? void 0 : data.expert;\n  }, [userDataRef.current]);\n  const {\n    signIn\n  } = useGoogleLogin({\n    // @ts-ignore\n    onSuccess,\n    onFailure,\n    onAutoLoadFinished,\n    clientId: googleClientId,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n    scope: 'https://www.googleapis.com/auth/user.phonenumbers.read',\n    redirectUri: true ? 'https://10n1.tikalk.dev/registration/step2' : 'http://localhost:3000/registration/step2'\n  });\n  const {\n    signOut\n  } = useGoogleLogout({\n    onLogoutSuccess: onLogout,\n    clientId: googleClientId,\n    cookiePolicy: 'single_host_origin'\n  });\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userData: (_userDataRef$current16 = userDataRef.current) !== null && _userDataRef$current16 !== void 0 ? _userDataRef$current16 : {},\n      login: signIn,\n      logout: signOut,\n      isLoading,\n      refetch\n    },\n    children: isLoading ? /*#__PURE__*/_jsx(Container, {\n      className: \"d-flex align-items-center justify-content-center vh-100\",\n      children: /*#__PURE__*/_jsx(Spinner, {\n        size: \"lg\",\n        color: \"warning\"\n      })\n    }) : children\n  });\n};\nexport const useAuth = () => useContext(AuthContext);\nexport default useAuth;","map":null,"metadata":{},"sourceType":"module"}