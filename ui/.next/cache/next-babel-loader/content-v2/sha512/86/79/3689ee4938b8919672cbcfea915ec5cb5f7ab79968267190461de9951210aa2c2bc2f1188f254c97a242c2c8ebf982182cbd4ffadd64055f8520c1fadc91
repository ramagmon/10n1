{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Col, Container, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';\nimport { useQuery } from '@apollo/client';\nimport { TagCloud } from 'react-tagcloud';\nimport { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport Header from '../../components/Header';\nimport { EXPERTISE, EXPERTS_LIST } from '../../graphql/queries';\nimport ExpertCard from '../../components/ExpertCard';\n\nconst Index = () => {\n  var _expertise$expertise;\n\n  const {\n    data\n  } = useQuery(EXPERTS_LIST);\n  const {\n    data: expertise\n  } = useQuery(EXPERTISE);\n  const {\n    0: searchString,\n    1: setSearchString\n  } = useState('');\n  const {\n    0: experts,\n    1: setExperts\n  } = useState([]);\n  const {\n    0: expertiseFilter,\n    1: setExpertiseFilter\n  } = useState('');\n  useEffect(() => {\n    if (!searchString && !expertiseFilter) {\n      setExperts(data === null || data === void 0 ? void 0 : data.experts);\n    } else if (searchString && !expertiseFilter) {\n      setExperts(data.experts.filter(expert => expert.name.toLowerCase().search(searchString.toLowerCase()) > -1));\n    } else if (expertiseFilter && !searchString) {\n      setExperts(data.experts.filter(expert => {\n        const regex = new RegExp(_.map(expert.expertise, 'name').join('|'), 'i');\n        return regex.test(expertiseFilter) && expert.expertise.length;\n      }));\n    } else {\n      setExperts(data.experts.filter(expert => {\n        const regex = new RegExp(expert.expertise.join('|'), 'i');\n        return regex.test(expertiseFilter) && expert.expertise.length && expert.name.toLowerCase().search(searchString.toLowerCase()) > -1;\n      }));\n    }\n  }, [searchString, expertiseFilter, data === null || data === void 0 ? void 0 : data.experts]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      title: \"10n1 - Expert List\"\n    }), /*#__PURE__*/_jsxs(Container, {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxs(\"h1\", {\n        className: \"d-flex align-items-center\",\n        children: [\"Experts List (\", experts === null || experts === void 0 ? void 0 : experts.length, \")\\xA0\\xA0\\xA0\", expertiseFilter && /*#__PURE__*/_jsxs(\"span\", {\n          style: {\n            fontSize: 20\n          },\n          children: ['     ', \"- Filtered by: \", expertiseFilter]\n        }), ' ', searchString && /*#__PURE__*/_jsxs(\"span\", {\n          style: {\n            fontSize: 20\n          },\n          children: ['     ', \"- Filtered by name starting with: \", searchString]\n        })]\n      }), /*#__PURE__*/_jsxs(InputGroup, {\n        children: [/*#__PURE__*/_jsx(InputGroupAddon, {\n          addonType: \"prepend\",\n          children: /*#__PURE__*/_jsx(InputGroupText, {\n            children: /*#__PURE__*/_jsx(\"i\", {\n              className: \"now-ui-icons users_single-02\"\n            })\n          })\n        }), /*#__PURE__*/_jsx(Input, {\n          placeholder: \"Search Expert by name\",\n          onChange: e => setSearchString(e.target.value)\n        })]\n      }), (expertise === null || expertise === void 0 ? void 0 : (_expertise$expertise = expertise.expertise) === null || _expertise$expertise === void 0 ? void 0 : _expertise$expertise.length) > 0 && /*#__PURE__*/_jsx(TagCloud, {\n        minSize: 14,\n        maxSize: 60,\n        tags: expertise === null || expertise === void 0 ? void 0 : expertise.expertise,\n        onClick: tag => {\n          if (tag.value === expertiseFilter) {\n            setExpertiseFilter('');\n          } else {\n            setExpertiseFilter(tag.value);\n          }\n        },\n        shuffle: true\n      }), /*#__PURE__*/_jsx(\"hr\", {\n        className: \"mb-5\"\n      }), /*#__PURE__*/_jsx(Row, {\n        children: data && (experts === null || experts === void 0 ? void 0 : experts.length) && (experts === null || experts === void 0 ? void 0 : experts.map(expert => /*#__PURE__*/_jsx(Col, {\n          md: 6,\n          children: /*#__PURE__*/_jsx(ExpertCard, {\n            expert: expert\n          })\n        }, expert.email)))\n      })]\n    })]\n  });\n};\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}