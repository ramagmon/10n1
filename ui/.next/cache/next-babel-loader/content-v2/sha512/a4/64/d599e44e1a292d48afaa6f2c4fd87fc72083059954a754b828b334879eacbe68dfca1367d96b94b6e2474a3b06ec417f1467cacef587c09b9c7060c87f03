{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable react/no-unescaped-entities */\nimport { Button, Card, CardBody, CardHeader, Col, Container, Row } from 'reactstrap';\nimport { useRouter } from 'next/router';\nimport { useFormik } from 'formik';\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { useCallback, useEffect, useState } from 'react';\nimport { TagCloud } from 'react-tagcloud';\nimport Header from '../../components/Header';\nimport { UPDATE_EXPERT } from '../../graphql/mutations';\nimport useAuth from '../../hooks/useAuth';\nconst RegistrationSchema = Yup.object().shape({\n  expertise: Yup.array().min(1).required()\n});\n\nconst Step3 = () => {\n  var _userData$expertise, _formik$values$expert, _formik$values, _formik$errors, _formik$values2, _formik$values2$exper, _formik$values3, _formik$values3$exper;\n\n  const {\n    userData,\n    refetch\n  } = useAuth();\n  const router = useRouter();\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const [updateExpert] = useMutation(UPDATE_EXPERT);\n  const formik = useFormik({\n    initialValues: {\n      expertise: (_userData$expertise = userData === null || userData === void 0 ? void 0 : userData.expertise) !== null && _userData$expertise !== void 0 ? _userData$expertise : []\n    },\n    enableReinitialize: true,\n    validationSchema: RegistrationSchema,\n    onSubmit: () => {}\n  });\n  const submit = useCallback(async () => {\n    await updateExpert({\n      variables: {\n        input: {\n          email: userData === null || userData === void 0 ? void 0 : userData.email,\n          expertise: [...formik.values.expertise.map(theme => typeof theme === 'object' ? _.pick(theme, ['name']) : {\n            name: theme\n          })]\n        }\n      }\n    });\n    await refetch();\n    router.push('/registration/step4');\n  }, [formik.values, userData]);\n  useEffect(() => {\n    fetch('/api/radar').then(res => res.json()).then(resData => {\n      const techs = [];\n      resData.forEach((tech, idx) => {\n        if (idx) {\n          techs.push(tech[0] || '');\n        }\n      });\n      setOptions(_.uniq(techs));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      title: \"Tikal 10n1 step3\"\n    }), /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsx(Col, {\n          md: 8,\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"pt-2 px-3\",\n              children: /*#__PURE__*/_jsx(\"h2\", {\n                children: \"Registration Step III - Choose your expertise\"\n              })\n            }), /*#__PURE__*/_jsxs(CardBody, {\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                children: \"Please select from the list of expertise the technologies you fell comfortable to help others with. If one of the tech's is missing type the name of the tech and click \\\"New selection\\\"\"\n              }), /*#__PURE__*/_jsx(Typeahead, {\n                id: \"expertise\",\n                name: \"expertise\",\n                labelKey: \"name\",\n                size: \"large\",\n                multiple: true,\n                allowNew: true,\n                onChange: value => {\n                  formik.setFieldValue('expertise', value);\n                },\n                options: options,\n                placeholder: \"Choose expertise, You can choose several expertise...\",\n                selected: (_formik$values$expert = formik === null || formik === void 0 ? void 0 : (_formik$values = formik.values) === null || _formik$values === void 0 ? void 0 : _formik$values.expertise) !== null && _formik$values$expert !== void 0 ? _formik$values$expert : [].map(expertise => expertise.name),\n                className: (_formik$errors = formik.errors) !== null && _formik$errors !== void 0 && _formik$errors.expertise && formik.touched.expertise ? 'border-danger border rounded' : ''\n              }), /*#__PURE__*/_jsx(\"br\", {}), (formik === null || formik === void 0 ? void 0 : (_formik$values2 = formik.values) === null || _formik$values2 === void 0 ? void 0 : (_formik$values2$exper = _formik$values2.expertise) === null || _formik$values2$exper === void 0 ? void 0 : _formik$values2$exper.length) === 0 && /*#__PURE__*/_jsx(\"span\", {\n                className: \"text-danger\",\n                children: \"Please select at least one expertise in order to proceed.\"\n              }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n                size: \"lg\",\n                color: \"primary\",\n                disabled: (formik === null || formik === void 0 ? void 0 : (_formik$values3 = formik.values) === null || _formik$values3 === void 0 ? void 0 : (_formik$values3$exper = _formik$values3.expertise) === null || _formik$values3$exper === void 0 ? void 0 : _formik$values3$exper.length) === 0,\n                onClick: submit,\n                children: \"Next Step\"\n              })]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Col, {\n          md: 4,\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: \"/superHero3.png\",\n            alt: \"Be a 10n1 Super hero\",\n            style: {\n              maxWidth: '75%'\n            }\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          children: /*#__PURE__*/_jsx(TagCloud, {\n            minSize: 14,\n            maxSize: 60,\n            tags: [],\n            onClick: tag => alert(tag) // setSelectedFilters({\n            //   ...selectedFilters,\n            //   themes: tag.value,\n            // })\n            ,\n            shuffle: true\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default Step3;","map":null,"metadata":{},"sourceType":"module"}