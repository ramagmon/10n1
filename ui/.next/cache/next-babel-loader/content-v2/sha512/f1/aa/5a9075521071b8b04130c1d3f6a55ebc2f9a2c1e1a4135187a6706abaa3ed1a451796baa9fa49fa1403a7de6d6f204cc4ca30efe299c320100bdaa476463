{"ast":null,"code":"import { ApolloClient, ApolloLink, HttpLink, InMemoryCache } from '@apollo/client';\nexport const cache = new InMemoryCache();\n\nfunction startApollo() {\n  const DS_HOST = false ? '10n1.tikalk.dev' : 'localhost';\n  const DS_PORT = false ? '' : '4000';\n  const DS_PATH = '/graphql';\n  const httpLink = new HttpLink({\n    uri: `//${DS_HOST}:${DS_PORT}${DS_PATH}`\n  });\n  const cleanTypeName = new ApolloLink((operation, forward) => {\n    if (operation.variables) {\n      const omitTypename = (key, value) => key === '__typename' ? undefined : value; // eslint-disable-next-line no-param-reassign\n\n\n      operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename);\n    }\n\n    return forward(operation).map(data => {\n      return data;\n    });\n  });\n  const client = new ApolloClient({\n    link: ApolloLink.from([cleanTypeName, httpLink]),\n    cache\n  });\n  return client;\n}\n\nexport default startApollo();","map":{"version":3,"sources":["/Users/ranwahle/dev/10n1/ui/apollo-client.ts"],"names":["ApolloClient","ApolloLink","HttpLink","InMemoryCache","cache","startApollo","DS_HOST","DS_PORT","DS_PATH","httpLink","uri","cleanTypeName","operation","forward","variables","omitTypename","key","value","undefined","JSON","parse","stringify","map","data","client","link","from"],"mappings":"AAAA,SACEA,YADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,aAJF,QAKO,gBALP;AAOA,OAAO,MAAMC,KAAK,GAAG,IAAID,aAAJ,EAAd;;AAEP,SAASE,WAAT,GAAuB;AACrB,QAAMC,OAAO,GACX,QAAwC,iBAAxC,GAA4D,WAD9D;AAEA,QAAMC,OAAO,GAAG,QAAwC,EAAxC,GAA6C,MAA7D;AACA,QAAMC,OAAO,GAAG,UAAhB;AAEA,QAAMC,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAC5BQ,IAAAA,GAAG,EAAG,KAAIJ,OAAQ,IAAGC,OAAQ,GAAEC,OAAQ;AADX,GAAb,CAAjB;AAIA,QAAMG,aAAa,GAAG,IAAIV,UAAJ,CAAe,CAACW,SAAD,EAAYC,OAAZ,KAAwB;AAC3D,QAAID,SAAS,CAACE,SAAd,EAAyB;AACvB,YAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,KAAN,KACnBD,GAAG,KAAK,YAAR,GAAuBE,SAAvB,GAAmCD,KADrC,CADuB,CAGvB;;;AACAL,MAAAA,SAAS,CAACE,SAAV,GAAsBK,IAAI,CAACC,KAAL,CACpBD,IAAI,CAACE,SAAL,CAAeT,SAAS,CAACE,SAAzB,CADoB,EAEpBC,YAFoB,CAAtB;AAID;;AACD,WAAOF,OAAO,CAACD,SAAD,CAAP,CAAmBU,GAAnB,CAAwBC,IAAD,IAAU;AACtC,aAAOA,IAAP;AACD,KAFM,CAAP;AAGD,GAbqB,CAAtB;AAeA,QAAMC,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC9ByB,IAAAA,IAAI,EAAExB,UAAU,CAACyB,IAAX,CAAgB,CAACf,aAAD,EAAgBF,QAAhB,CAAhB,CADwB;AAE9BL,IAAAA;AAF8B,GAAjB,CAAf;AAIA,SAAOoB,MAAP;AACD;;AAED,eAAenB,WAAW,EAA1B","sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  HttpLink,\n  InMemoryCache,\n} from '@apollo/client';\n\nexport const cache = new InMemoryCache();\n\nfunction startApollo() {\n  const DS_HOST =\n    process.env.NODE_ENV === 'production' ? '10n1.tikalk.dev' : 'localhost';\n  const DS_PORT = process.env.NODE_ENV === 'production' ? '' : '4000';\n  const DS_PATH = '/graphql';\n\n  const httpLink = new HttpLink({\n    uri: `//${DS_HOST}:${DS_PORT}${DS_PATH}`,\n  });\n\n  const cleanTypeName = new ApolloLink((operation, forward) => {\n    if (operation.variables) {\n      const omitTypename = (key, value) =>\n        key === '__typename' ? undefined : value;\n      // eslint-disable-next-line no-param-reassign\n      operation.variables = JSON.parse(\n        JSON.stringify(operation.variables),\n        omitTypename,\n      );\n    }\n    return forward(operation).map((data) => {\n      return data;\n    });\n  });\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([cleanTypeName, httpLink]),\n    cache,\n  });\n  return client;\n}\n\nexport default startApollo();\n"]},"metadata":{},"sourceType":"module"}